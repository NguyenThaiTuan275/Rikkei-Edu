"use strict";
class Todo {
    constructor(id, content, status = false) {
        this.id = id;
        this.content = content;
        this.status = status;
    }
    toString() {
        const statusText = this.status ? "Ho√†n th√†nh" : "Ch∆∞a ho√†n th√†nh";
        return `ID: ${this.id}, N·ªôi dung: ${this.content}, Tr·∫°ng th√°i: ${statusText}`;
    }
}
class TodoListManager {
    constructor() {
        this.todos = [];
        this.currentId = 1;
    }
    addTodo(content) {
        if (content.trim() === "") {
            console.log("‚ö†Ô∏è N·ªôi dung kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.");
            return;
        }
        const todo = new Todo(this.currentId++, content);
        this.todos.push(todo);
        console.log(`‚úÖ ƒê√£ th√™m: ${todo.toString()}`);
    }
    removeTodo(index) {
        if (index < 0 || index >= this.todos.length) {
            console.log("‚ö†Ô∏è V·ªã tr√≠ kh√¥ng h·ª£p l·ªá.");
            return;
        }
        const removed = this.todos.splice(index, 1)[0];
        console.log(`üóëÔ∏è ƒê√£ x√≥a: ${removed.toString()}`);
    }
    updateTodo(index, content) {
        if (index < 0 || index >= this.todos.length) {
            console.log("‚ö†Ô∏è V·ªã tr√≠ kh√¥ng h·ª£p l·ªá.");
            return;
        }
        if (content.trim() === "") {
            console.log("‚ö†Ô∏è N·ªôi dung kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.");
            return;
        }
        const todo = this.todos[index];
        console.log(`‚úèÔ∏è ƒê√£ c·∫≠p nh·∫≠t: "${todo.content}" th√†nh "${content}"`);
        todo.content = content;
    }
    sortTodos() {
        this.todos.sort((a, b) => a.content.localeCompare(b.content));
        console.log("üìã Danh s√°ch c√¥ng vi·ªác ƒë√£ s·∫Øp x·∫øp theo alphabet:");
        this.listTodos();
    }
    findTodo(content) {
        const index = this.todos.findIndex(todo => todo.content.includes(content));
        if (index !== -1) {
            console.log(`üîç T√¨m th·∫•y t·∫°i v·ªã tr√≠ ${index}: ${this.todos[index].toString()}`);
        }
        else {
            console.log("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y c√¥ng vi·ªác.");
        }
    }
    listTodos() {
        if (this.todos.length === 0) {
            console.log("üìÇ Danh s√°ch c√¥ng vi·ªác tr·ªëng.");
        }
        else {
            this.todos.forEach(todo => console.log(todo.toString()));
        }
    }
}
class Main {
    constructor() {
        this.manager = new TodoListManager();
    }
    start() {
        let running = true;
        while (running) {
            const choice = prompt("Ch·ªçn ch·ª©c nƒÉng:\n" +
                "1. In danh s√°ch c√¥ng vi·ªác\n" +
                "2. Th√™m c√¥ng vi·ªác\n" +
                "3. X√≥a c√¥ng vi·ªác\n" +
                "4. S·ª≠a c√¥ng vi·ªác\n" +
                "5. S·∫Øp x·∫øp c√¥ng vi·ªác\n" +
                "6. T√¨m ki·∫øm c√¥ng vi·ªác\n" +
                "7. D·ª´ng ch∆∞∆°ng tr√¨nh\n");
            switch (choice) {
                case "1":
                    this.manager.listTodos();
                    break;
                case "2":
                    const addContent = prompt("Nh·∫≠p n·ªôi dung c√¥ng vi·ªác c·∫ßn th√™m:");
                    if (addContent)
                        this.manager.addTodo(addContent);
                    break;
                case "3":
                    const removeIndex = parseInt(prompt("Nh·∫≠p v·ªã tr√≠ c·∫ßn x√≥a:") || "-1", 10);
                    this.manager.removeTodo(removeIndex);
                    break;
                case "4":
                    const updateIndex = parseInt(prompt("Nh·∫≠p v·ªã tr√≠ c·∫ßn s·ª≠a:") || "-1", 10);
                    const updateContent = prompt("Nh·∫≠p n·ªôi dung m·ªõi:");
                    if (updateContent)
                        this.manager.updateTodo(updateIndex, updateContent);
                    break;
                case "5":
                    this.manager.sortTodos();
                    break;
                case "6":
                    const searchContent = prompt("Nh·∫≠p n·ªôi dung c·∫ßn t√¨m:");
                    if (searchContent)
                        this.manager.findTodo(searchContent);
                    break;
                case "7":
                    running = false;
                    console.log("üö™ ƒê√£ tho√°t ch∆∞∆°ng tr√¨nh.");
                    break;
                default:
                    console.log("‚ö†Ô∏è L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i.");
            }
        }
    }
}
const app = new Main();
app.start();
